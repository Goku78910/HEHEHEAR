import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
# Step 1: Create a sample dataset with more meaningful variance
X = np.array([
 [2.5, 2.4],
 [0.5, 0.7],
 [2.2, 2.9],
 [1.9, 2.2],
 [3.1, 3.0],
 [2.3, 2.7],
 [2, 1.6],
 [1, 1.1],
 [1.5, 1.6],
 [1.1, 0.9]
])
print("Original Data:\n", X)
# Step 2: Standardize the data (very important for PCA)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
# Step 3: Apply PCA
pca = PCA(n_components=2) # Keep both components for explanation
X_pca = pca.fit_transform(X_scaled)
# Step 4: Display results
print("\nTransformed Data (PCA Result):\n", X_pca)
print("\nExplained Variance Ratio:", pca.explained_variance_ratio_)
print("Singular Values:", pca.singular_values_)
print("Components (eigenvectors):\n", pca.components_)
# Step 5: Visualize the PCA result
plt.figure(figsize=(8, 6))
plt.scatter(X_pca[:, 0], X_pca[:, 1], color='green', edgecolor='k')
plt.title('PCA Transformed Data')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.grid(True)
plt.show()