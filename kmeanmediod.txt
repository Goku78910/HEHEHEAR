import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn_extra.cluster import KMedoids
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
# 1. Generate synthetic dataset (150 samples, 4 features, 3 clusters)
X, _ = make_blobs(n_samples=150, centers=3, n_features=4,
random_state=42)
df = pd.DataFrame(X, columns=['Feature1', 'Feature2', 'Feature3', 'Feature4'])
# 2. Pre-processing: Standardize the data
scaler = StandardScaler()
df_scaled = scaler.fit_transform(df)
# 3. Apply KMeans clustering
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(df_scaled)
df['KMeans_Cluster'] = kmeans.labels_
# Output KMeans results
print("KMeans Cluster Centers:\n", kmeans.cluster_centers_)
# 4. Apply KMedoids clustering
kmedoids = KMedoids(n_clusters=3, random_state=42)
kmedoids.fit(df_scaled)
df['KMedoids_Cluster'] = kmedoids.labels_
# Output KMedoids results
print("KMedoids Cluster Medoids (indices):", kmedoids.medoid_indices_)
# 5. Reduce dimensions for visualization
pca = PCA(n_components=2)
df_pca = pca.fit_transform(df_scaled)
# 6. Visualize KMeans clusters
plt.figure(figsize=(8, 6))
plt.scatter(df_pca[:, 0], df_pca[:, 1], c=df['KMeans_Cluster'], cmap='viridis',
alpha=0.7)
plt.title('KMeans Clustering (PCA Projection)')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.colorbar(label='Cluster')
plt.grid(True)
plt.tight_layout()
plt.show()
# 7. Visualize KMedoids clusters
plt.figure(figsize=(8, 6))
plt.scatter(df_pca[:, 0], df_pca[:, 1], c=df['KMedoids_Cluster'], cmap='plasma',
alpha=0.7)
plt.title('KMedoids Clustering (PCA Projection)')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.colorbar(label='Cluster')
plt.grid(True)
plt.tight_layout()
plt.show()
# Optional: Save result
# df.to_csv("clustered_result.csv", index=False)